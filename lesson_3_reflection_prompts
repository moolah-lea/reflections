When would you want to use a remote repository rather than keeping all your work local?

When you have multiple collaborators/contributors to a project. Perhaps you have multiple workstations. Having a remote repository gives you the liberty of 
working on the cloud. You can virtually work from anywhere in that case. 

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

Because we operate on branches, sometimes certain changes you make locally are not meant to be released publicly. Like when you are trying to implement a new feature or patching a bug that requires a few files to be worked on and to do so without affecting the current working version available online. If you have multiple collaborators, not all changes are expected to be a great fit for the rest. You want to have a control mechanism in place to ensure only the working and accepted version are being commited and made online for others to use.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

Forks are clones that you make of other GitHub repositories primarily because you do not have permission to make changes directly to that particular project. You can fork that repository to work on your local com by git cloning it. This way, there is a tracking method to know where the actual origin of this code comes from. Forks are clones made on GitHub.

Clones are the exact duplicate of the repository or its requested branch on to your local machine or on GitHub.

Branches are basically a single repository on a local machine with multiple commits. There has been no duplicates of this project anywhere else.

What is the benefit of having a copy of the last known state of the remote stored locally?

This way, whatever changes we have done locally and without an Internet connection, can be reflected remotely, by knowing which was the last copy that was pulled out of the GitHub repository. The difference will then serve as a base point for comparison when it comes time to merge the files to get up-to-date.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

Perhaps we could use other enterprise style programs for version-control. Although it will not be as accessible as GitHub, it allows for collabortive work. The other way is to use Cloud services like Dropbox. Or the traditional method of emails and timestamps. Manually amending merges and commits.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

When you want to take another person's work and add on to it with productive features. Ways that you could help improve. By adding new add-ons etc. The master is where all changes are made available to everyone. If all changes are made directly, then there will be no control mechanism in place. All projects can go corrupt with chanegs coming from all over the web.
