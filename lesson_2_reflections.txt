What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository, it creates a hidden .git file in the folder you are creating your repoitory in. It contains metadata that helps tracking files and their recent changes. We need to initialize so that the .git file is created and the tracking metadata can be stored thus identifying this folder as a repository as opposed to being a normal folder.

How is the staging area different from the working directory and the repository? What value do you think it offers?

Staging area is like a holding area before commiting to the repository from the actual working directories. This allows us to only add certain files one at a time as per the one logical change per commit rule. It makes sure that not all changes within a working directory are necessary to be stored in the repository thus reducing clutter.

How can you use the staging area to make sure you have one commit per logical change?

After making changes on a few files (one feature/fixed bug), for example, you may add it to the staging area. For every file that was changed to implement this feature/bug fix, git diff and add only the files that count within that change to the staging area. This way, when you git commit, you are certainly only commiting every time there is one logical change.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches will be particularly useful when you want to experiment a new feature or perhaps introduce a new language of your current program. This way, rather than disrupting the main (master) branch, you can create a separate branch and test things out there. Keeps the codes organized and clean as it breaks away from the main branch when trying these new add-ons, thus allowing the main program to remain functional.

How do the diagrams help you visualize the branch structure?

The diagrams, show the difference between checking out commits and checking out Branches. It also shows how it could be beneficial to always create a branch when working on some new added features from a previous commit. This gives for a well documented manner for all final changes to merge with the Master branch as it is also being concurrently worked on.